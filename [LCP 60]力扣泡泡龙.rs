/**
Ê¨¢ËøéÂêÑ‰ΩçÂãáËÄÖÊù•Âà∞ÂäõÊâ£ÂüéÔºåÊú¨Ê¨°ËØïÁÇº‰∏ªÈ¢ò‰∏∫„ÄåÂäõÊâ£Ê≥°Ê≥°Èæô„Äç„ÄÇ

Ê∏∏ÊàèÂàùÂßãÁä∂ÊÄÅÁöÑÊ≥°Ê≥°ÂΩ¢Â¶Ç‰∫åÂèâÊ†ë `root`ÔºåÊØè‰∏™ËäÇÁÇπÂÄºÂØπÂ∫î‰∫ÜËØ•Ê≥°Ê≥°ÁöÑÂàÜÂÄº„ÄÇÂãáËÄÖÊúÄÂ§öÂèØ‰ª•ÂáªÁ†¥‰∏Ä‰∏™ËäÇÁÇπÊ≥°Ê≥°ÔºåË¶ÅÊ±ÇÊª°Ë∂≥Ôºö
- Ë¢´ÂáªÁ†¥ÁöÑËäÇÁÇπÊ≥°Ê≥° **Ëá≥Â§ö** Âè™Êúâ‰∏Ä‰∏™Â≠êËäÇÁÇπÊ≥°Ê≥°
- ÂΩìË¢´ÂáªÁ†¥ÁöÑËäÇÁÇπÊ≥°Ê≥°ÊúâÂ≠êËäÇÁÇπÊ≥°Ê≥°Êó∂ÔºåÂàôÂ≠êËäÇÁÇπÊ≥°Ê≥°Â∞ÜÂèñ‰ª£Ë¢´ÂáªÁ†¥Ê≥°Ê≥°ÁöÑ‰ΩçÁΩÆ

 > Ê≥®ÔºöÂç≥Êï¥Ê£µÂ≠êÊ†ëÊ≥°Ê≥°‰∏äÁßª

ËØ∑ÈóÆÂú®ÂáªÁ†¥‰∏Ä‰∏™ËäÇÁÇπÊ≥°Ê≥°Êìç‰ΩúÊàñÊó†ÂáªÁ†¥Êìç‰ΩúÂêéÔºå‰∫åÂèâÊ≥°Ê≥°Ê†ëÁöÑÊúÄÂ§ß„ÄåÂ±ÇÂíå„ÄçÊòØÂ§öÂ∞ë„ÄÇ

**Ê≥®ÊÑèÔºö**
- „ÄåÂ±ÇÂíå„Äç‰∏∫Âêå‰∏ÄÈ´òÂ∫¶ÁöÑÊâÄÊúâËäÇÁÇπÁöÑÂàÜÂÄº‰πãÂíå

**Á§∫‰æã 1Ôºö**

> ËæìÂÖ•Ôºö`root = [6,0,3,null,8]`
>
> ËæìÂá∫Ôºö`11`
>
> Ëß£ÈáäÔºöÂãáËÄÖÁöÑÊúÄ‰Ω≥ÊñπÊ°àÂ¶ÇÂõæÊâÄÁ§∫
> ![image.png](https://pic.leetcode-cn.com/1648180809-XSWPLu-image.png){:height=
"100px"}

**Á§∫‰æã 2Ôºö**

> ËæìÂÖ•Ôºö`root = [5,6,2,4,null,null,1,3,5]`
>
> ËæìÂá∫Ôºö`9`
>
> Ëß£ÈáäÔºöÂãáËÄÖÂáªÁ†¥ 6 ËäÇÁÇπÔºåÊ≠§Êó∂„ÄåÂ±ÇÂíå„ÄçÊúÄÂ§ß‰∏∫ 3+5+1 = 9
> ![image.png](https://pic.leetcode-cn.com/1648180769-TLpYop-image.png){:height=
"200px"}

**Á§∫‰æã 3Ôºö**

> ËæìÂÖ•Ôºö`root = [-5,1,7]`
>
> ËæìÂá∫Ôºö`8`
>
> Ëß£ÈáäÔºöÂãáËÄÖ‰∏çÂáªÁ†¥ËäÇÁÇπÔºå„ÄåÂ±ÇÂíå„ÄçÊúÄÂ§ß‰∏∫ 1+7 = 8

**ÊèêÁ§∫**Ôºö
- `2 <= Ê†ë‰∏≠ËäÇÁÇπ‰∏™Êï∞ <= 10^5`
- `-10000 <= Ê†ë‰∏≠ËäÇÁÇπÁöÑÂÄº <= 10000`

 Related Topics Ê†ë Âä®ÊÄÅËßÑÂàí ‰∫åÂèâÊ†ë 
 üëç 10 üëé 0

 */
// Definition for a binary tree node.
#[derive(Debug, PartialEq, Eq)]
pub struct TreeNode {
    pub val: i32,
    pub left: Option<Rc<RefCell<TreeNode>>>,
    pub right: Option<Rc<RefCell<TreeNode>>>,
}

impl TreeNode {
    #[inline]
    pub fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None,
        }
    }
}

//leetcode submit region begin(Prohibit modification and deletion)
use std::rc::Rc;
use std::cell::RefCell;

impl Solution {
    pub fn get_max_layer_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        let mut layers: Vec<Vec<Option<Rc<RefCell<TreeNode>>>>> = vec![vec![root.clone()]];
        let mut layer_sums: Vec<i32> = vec![root.as_ref().unwrap().borrow().val];
        let mut children_indices_list: Vec<Vec<Vec<usize>>> = vec![];
        let mut vals_list: Vec<Vec<i32>> = vec![vec![root.as_ref().unwrap().borrow().val]];
        // if root.as_ref().unwrap().borrow().left.is_none() || root.as_ref().unwrap().borrow().right.is_none() {
        //     children_indices_list.push(vec![vec![0]]);
        // } else {
        //     children_indices_list.push(vec![vec![0, 1]]);
        // }
        let mut layer_num = 0;
        loop {
            let mut layer = vec![];
            let mut children_indices = vec![];
            let mut index = 0;
            let mut vals = vec![];
            for node in layers.last().unwrap() {
                // if node.is_none() {
                //     continue;
                // }
                let mut children_index = vec![];
                let node = node.as_ref().unwrap().borrow();
                if node.left.is_some() {
                    layer.push(node.left.clone());
                    vals.push(node.left.as_ref().unwrap().borrow().val);
                    children_index.push(index);
                    index += 1
                }
                if node.right.is_some() {
                    layer.push(node.right.clone());
                    vals.push(node.right.as_ref().unwrap().borrow().val);
                    children_index.push(index);
                    index += 1;
                }
                children_indices.push(children_index);
            }
            if layer.is_empty() {
                break;
            }
            vals_list.push(vals);
            children_indices_list.push(children_indices);
            layers.push(layer);
            layer_num += 1;
        }
        println!("{:?}", vals_list);
        println!("{:?}", layers);
        println!("{:?}", children_indices_list);
        32
    }
}

//leetcode submit region end(Prohibit modification and deletion)
struct Solution;

fn main() {
    let mut root = TreeNode::new(6);
    root.left = Some(Rc::new(RefCell::new(TreeNode::new(0))));
    root.right = Some(Rc::new(RefCell::new(TreeNode::new(3))));
    root.left.as_ref().unwrap().borrow_mut().right = Some(Rc::new(RefCell::new(TreeNode::new(8))));
    root.right.as_ref().unwrap().borrow_mut().left = Some(Rc::new(RefCell::new(TreeNode::new(2))));
    root.right.as_ref().unwrap().borrow_mut().right = Some(Rc::new(RefCell::new(TreeNode::new(4))));
    // // println!("{:?}", Some(Rc::new(RefCell::new(root))));
    println!("{:?}", Solution::get_max_layer_sum(Some(Rc::new(RefCell::new(root)))));
    let mut i = 1;
}